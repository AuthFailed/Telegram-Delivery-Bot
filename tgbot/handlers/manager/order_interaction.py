from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import MessageNotModified
from asyncpg import UndefinedColumnError

from tgbot.config import load_config
from tgbot.keyboards.inline.courier.order import courier_order_keyboard_kb
from tgbot.keyboards.inline.manager.choose_courier import choose_courier_kb
from tgbot.keyboards.inline.manager.order import order_keyboard
from tgbot.keyboards.inline.manager.order_status import change_order_status
from tgbot.services.repository import Repo


async def generate_order_data_message(order_data=None, order_id: int = None, is_new: bool = True,
                                      is_company: bool = False, repo: Repo = None):
    order_message = ""
    if order_data is None:
        order_data = await repo.get_order(order_id=order_id)
    if is_new:
        try:
            if is_company:
                order_message += f"üö© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_data['orderid']} | *–ö–æ–º–ø–∞–Ω–∏—è*\n"
            else:
                order_message += f"üö© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_data['orderid']} | *–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ*\n"
        except TypeError:
            return f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    else:
        if is_company:
            order_message += f"üö© –ó–∞–∫–∞–∑ ‚Ññ{order_data['orderid'] if order_data is not None else order_id} | *–ö–æ–º–ø–∞–Ω–∏—è*\n"
        else:
            order_message += f"üö© –ó–∞–∫–∞–∑ ‚Ññ{order_data['orderid'] if order_data is not None else order_id} | *–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ*\n"

    order_message += f"‚è≥ –°—Ç–∞—Ç—É—Å: _{order_data['status']}_\n"

    try:
        courier_data = await repo.get_courier_by_userid(courier_id=order_data['courierid'])
        order_message += f"üöö –ö—É—Ä—å–µ—Ä: ‚Ññ{order_data['orderid']} | _{courier_data['name']}_\n"
    except TypeError:
        order_message += f"üöö –ö—É—Ä—å–µ—Ä: _–ù–µ –≤—ã–±—Ä–∞–Ω_\n"
    except UndefinedColumnError:
        order_message += f"üöö –ö—É—Ä—å–µ—Ä: _–ù–µ –≤—ã–±—Ä–∞–Ω_\n"

    order_message += f"""
üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:
–õ–∏—Ü–æ: `{order_data['customername']}`
–ê–¥—Ä–µ—Å: `{order_data['customeraddress']}`
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order_data['customernumber']}

üì• –ü–æ–ª—É—á–∞—Ç–µ–ª—å:
–§–ò–û: `{order_data['ordername']}`
–ù–æ–º–µ—Ä: `{order_data['ordernumber']}`
–ê–¥—Ä–µ—Å: {order_data['orderaddress']}

üì¶ –û –∑–∞–∫–∞–∑–µ:
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: `{order_data['ordertime']}`
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: `{order_data['otherdetails']}`"""
    return order_message


# change order status
async def change_order_status_kb(call: CallbackQuery, callback_data: dict):
    await call.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º")
    order_id = callback_data.get("order_id")
    await call.message.edit_reply_markup(reply_markup=await change_order_status(order_id=order_id))


async def change_order_status_db(call: CallbackQuery, callback_data: dict, repo: Repo):
    order_id = int(callback_data.get("order_id"))
    order_status = callback_data.get("status")
    couriers_list = [courier['userid'] for courier in await repo.get_couriers_list()]
    if order_status == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        if call.message.chat.id not in couriers_list:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await order_keyboard(order_id=order_id),
                                         parse_mode="Markdown")
        else:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await courier_order_keyboard_kb(order_id=order_id),
                                         parse_mode="Markdown")

    else:
        config = load_config("bot.ini")
        await repo.change_order_status(order_id=order_id, order_status=order_status)
        order_data = await repo.get_order(order_id=order_id)

        await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                     reply_markup=await order_keyboard(order_id=order_id),
                                     parse_mode="Markdown")

        await call.bot.send_message(chat_id=order_data['customerid'],
                                    text=f"üö© –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                                         f"‚è≥ –°—Ç–∞—Ç—É—Å: _{order_data['status']}_",
                                    parse_mode="Markdown")
        await call.bot.send_message(chat_id=config.tg_bot.orders_group,
                                    text=f"üö© –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                                         f"‚è≥ –°—Ç–∞—Ç—É—Å: _{order_data['status']}_",
                                    parse_mode="Markdown")
        if order_data['courierid'] is not None and call.message.chat.id not in couriers_list:
            await call.bot.send_message(chat_id=order_data['courierid'],
                                        text=f"üö© –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                                             f"‚è≥ –°—Ç–∞—Ç—É—Å: _{order_data['status']}_",
                                        parse_mode="Markdown")
        await call.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {order_status}")


# change order courier
async def list_of_available_couriers(call: CallbackQuery, callback_data: dict, repo: Repo):
    await call.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")
    available_couriers = await repo.get_available_couriers_list()
    await call.message.edit_reply_markup(
        reply_markup=await choose_courier_kb(order_id=callback_data['order_id'], courier_list=available_couriers))
    await call.answer()


async def set_order_courier(call: CallbackQuery, callback_data: dict, repo: Repo):
    order_id = callback_data['order_id']
    couriers_list = [courier['userid'] for courier in await repo.get_couriers_list()]
    if callback_data['courier_id'] == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        if call.message.chat.id not in couriers_list:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await order_keyboard(order_id=order_id),
                                         parse_mode="Markdown")
        else:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await courier_order_keyboard_kb(order_id=order_id),
                                         parse_mode="Markdown")

    else:
        choosed_courier_id = callback_data['courier_id']
        await repo.change_order_courier(order_id=order_id, courier_id=choosed_courier_id)
        if call.message.chat.id not in couriers_list:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await order_keyboard(order_id=order_id),
                                         parse_mode="Markdown")
        else:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await courier_order_keyboard_kb(order_id=order_id),
                                         parse_mode="Markdown")

        await call.bot.send_message(chat_id=choosed_courier_id,
                                    text=await generate_order_data_message(order_id=order_id, repo=repo),
                                    parse_mode="Markdown",
                                    reply_markup=await courier_order_keyboard_kb(order_id=order_id))
        await call.answer(text=f"–ö—É—Ä—å–µ—Ä id{choosed_courier_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    await call.answer()


# Update order
async def update_order_info(call: CallbackQuery, callback_data: dict, repo: Repo):
    order_id = callback_data['order_id']

    try:
        couriers_list = [courier['userid'] for courier in await repo.get_couriers_list()]
        if call.message.chat.id not in couriers_list:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await order_keyboard(order_id=order_id),
                                         parse_mode="Markdown")
        else:
            await call.message.edit_text(text=await generate_order_data_message(order_id=order_id, repo=repo),
                                         reply_markup=await courier_order_keyboard_kb(order_id=order_id),
                                         parse_mode="Markdown")

        await call.answer(text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except MessageNotModified:
        await call.answer(text=f"–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–∞–∑–µ ‚Ññ{order_id}.")
