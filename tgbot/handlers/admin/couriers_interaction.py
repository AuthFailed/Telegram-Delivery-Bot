# change order courier
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils import exceptions
from aiogram.utils.exceptions import MessageNotModified

from tgbot.handlers.admin.manage_bot import manage_bot
from tgbot.keyboards.default.admin.check_courier import check_courier
from tgbot.keyboards.default.admin.return_to_menu import return_to_menu
from tgbot.keyboards.inline.admin.courier import courier_kb
from tgbot.keyboards.inline.customer.pagination import get_pages_keyboard
from tgbot.services import Repo
from tgbot.states.admin.new_courier import NewCourier


async def generate_courier_data_message(courier_data, orders):
    answer_message = f"""<b>üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—å–µ—Ä–µ ‚Ññ{courier_data["id"]}</b>

üßë‚Äçüíº –§–ò–û: <code>{courier_data['name']}</code>
‚è≥ –°—Ç–∞—Ç—É—Å: <code>{courier_data['status']}</code>
üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {courier_data['number']}

üì¶ –ó–∞–∫–∞–∑–æ–≤ –≤–∑—è—Ç–æ: {len(orders)}
üÜî –ü—Ä–æ—Ñ–∏–ª—å: <a href="tg://user?id={courier_data['id']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a> """

    return answer_message


async def add_courier(c: CallbackQuery):
    await c.answer(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞")
    await c.message.delete()
    await c.message.answer(text="üÜî –í–≤–µ–¥–∏—Ç–µ id –∫—É—Ä—å–µ—Ä–∞ (/id):",
                           reply_markup=return_to_menu)
    await NewCourier.first()


async def courier_id(m: Message, repo: Repo, state: FSMContext):
    if m.text.isdigit():
        is_courier_exists = await repo.is_courier_exists(userid=m.text)
        if is_courier_exists:
            await m.answer(text="üö´ –î–∞–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
                                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            await state.finish()
            await manage_bot(m, repo)
            return
        await state.update_data(id=m.text)
        await m.answer(text="üßë‚Äçüíº –í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û –∫—É—Ä—å–µ—Ä–∞</b>:",
                       reply_markup=return_to_menu)

        await NewCourier.next()
    else:
        await m.answer(text="üö´ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID</b>")


async def courier_fio(m: Message, state: FSMContext):
    await state.update_data(name=m.text)
    await m.answer(text="üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫—É—Ä—å–µ—Ä–∞</b> (–Ω–∞—á–∏–Ω–∞—è —Å +7):")

    await NewCourier.next()


async def courier_number(m: Message, state: FSMContext):
    await state.update_data(number=m.text)
    await m.answer(text="üíº –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Å–ø–æ—Ä—Ç–∞ –∫—É—Ä—å–µ—Ä–∞</b>:")
    await NewCourier.next()


async def courier_passport_main(m: Message, state: FSMContext):
    await state.update_data(passport_main=m.photo[0].file_id)
    await m.answer(text="üíº –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π –∫—É—Ä—å–µ—Ä–∞</b>:")
    await NewCourier.next()


async def courier_passport_registration(m: Message, state: FSMContext):
    await state.update_data(passport_registration=m.photo[0].file_id)
    await m.answer(text="üí≥ –û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞</b>:")
    await NewCourier.next()


async def courier_driving_license_front(m: Message, state: FSMContext):
    await state.update_data(driving_license_front=m.photo[0].file_id)
    await m.answer(text="üí≥ –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞</b>:")
    await NewCourier.next()


async def courier_driving_license_back(m: Message, state: FSMContext):
    await state.update_data(driving_license_back=m.photo[0].file_id)
    courier_data = await state.get_data()

    media = types.MediaGroup()
    media.attach_photo(courier_data['passport_main'])
    media.attach_photo(courier_data['passport_registration'])
    media.attach_photo(courier_data['driving_license_front'])
    media.attach_photo(courier_data['driving_license_back'])

    await m.answer_media_group(media=media,
                               reply=True)
    await m.answer(text=f"""<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>

üßë‚Äçüíº –§–ò–û: <b>{courier_data['name']}</b>
üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{courier_data['number']}</b>""",
                   reply_markup=check_courier)
    await NewCourier.next()


async def courier_choice(m: Message, repo: Repo, state: FSMContext):
    if m.text == "üëå –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ":
        courier_data = await state.get_data()
        partner_data = await repo.get_partner(userid=m.from_user.id)
        city = partner_data['city']
        courier = await repo.add_courier(userid=courier_data['id'], name=courier_data['name'], city=city,
                                         number=courier_data['number'], passport_main_id=courier_data['passport_main'],
                                         passport_registration_id=courier_data['passport_registration'],
                                         driver_license_front_id=courier_data['driving_license_front'],
                                         driver_license_back_id=courier_data['driving_license_back'], applied=True)
        await state.finish()
        try:
            await m.bot.send_message(chat_id=courier_data['id'], text=f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã <b>–∫—É—Ä—å–µ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ {partner_data['city'].title()}!</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.""")
            await m.answer(
                text=f"""–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞!\n–ú—ã —É–∂–µ –æ–ø–æ–≤–µ—Å—Ç–∏–ª–∏ –µ–≥–æ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏.\n\n
{await generate_courier_data_message(courier[0], [])}""",
                reply_markup=ReplyKeyboardRemove())
        except exceptions.ChatNotFound:
            await m.answer(
                text=f"""<b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –µ–≥–æ –æ–± —ç—Ç–æ–º!</b>\n
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É—Ä—å–µ—Ä—É <a href="https://t.me/dostavka30rus_bot">—Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞</a> –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ\n
{await generate_courier_data_message(courier[0], [])}""",
                reply_markup=ReplyKeyboardRemove())
        await manage_bot(m, repo)
    elif m.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.finish()
        await m.answer(text="üÜî –í–≤–µ–¥–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (/id):", reply_markup=return_to_menu)
        await NewCourier.first()

    elif m.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await manage_bot(m, repo)


async def list_of_available_couriers(m: Message, repo: Repo):
    partner_data = await repo.get_partner(userid=m.chat.id)
    couriers_list = await repo.get_couriers_list(city=partner_data['city'])
    await m.answer(text="üöö –ö—É—Ä—å–µ—Ä—ã:",
                   reply_markup=await get_pages_keyboard(key="couriers", array=couriers_list))


async def show_chosen_page_couriers(c: CallbackQuery, callback_data: dict, repo: Repo):
    partner_data = await repo.get_partner(c.message.chat.id)
    couriers_list = await repo.get_couriers_list(city=partner_data['city'])
    current_page = int(callback_data.get("page"))

    try:
        await c.message.edit_reply_markup(
            await get_pages_keyboard(key="couriers", array=couriers_list, page=current_page))
        await c.answer()
    except MessageNotModified:
        await c.answer(text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")


async def show_courier(c: CallbackQuery, callback_data: dict, repo: Repo):
    await c.answer()
    courier_userid = callback_data['courier_id']

    answer_message = ""

    courier = await repo.get_courier(userid=courier_userid)
    courier_orders = await repo.get_couriers_orders(userid=courier['userid'])
    answer_message += await generate_courier_data_message(courier_data=courier, orders=courier_orders)
    await c.message.edit_text(text=answer_message, reply_markup=await courier_kb(courier_data=courier))


async def courier_action(c: CallbackQuery, callback_data: dict, repo: Repo):
    action = callback_data['action']
    if action == "activate":
        await repo.set_courier_apply_status(userid=callback_data['courier_id'], applied=True)
        await c.answer(text="–ö—É—Ä—å–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        courier_data = await repo.get_courier(userid=callback_data['courier_id'])
        courier_orders = await repo.get_couriers_orders(callback_data['courier_id'])
        await c.message.edit_text(text=await generate_courier_data_message(courier_data, orders=courier_orders),
                                  reply_markup=await courier_kb(courier_data))
    elif action == "deactivate":
        await repo.set_courier_apply_status(userid=callback_data['courier_id'], applied=False)
        await c.answer(text="–ö—É—Ä—å–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        courier_data = await repo.get_courier(userid=callback_data['courier_id'])
        courier_orders = await repo.get_couriers_orders(callback_data['courier_id'])
        await c.message.edit_text(text=await generate_courier_data_message(courier_data, orders=courier_orders),
                                  reply_markup=await courier_kb(courier_data))
    elif action == "delete":
        courier_data = await repo.get_courier(userid=callback_data['courier_id'])
        courier_orders = await repo.get_couriers_orders(callback_data['courier_id'])
        await repo.delete_courier(userid=callback_data['courier_id'])
        await c.answer(text="–ö—É—Ä—å–µ—Ä —É–¥–∞–ª–µ–Ω")
        try:
            await c.bot.send_message(chat_id=courier_data['userid'],
                                     text="<b>C –≤–∞c —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∫—É—Ä—å–µ—Ä–∞.</b>\n\n"
                                          "<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>")
            await c.message.edit_text(f"""
<b>–ü–∞—Ä—Ç–Ω–µ—Ä ‚Ññ{courier_data['id']} —É–¥–∞–ª–µ–Ω </b>

{await generate_courier_data_message(courier_data, courier_orders)}

–ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.""")
        except exceptions.ChatNotFound:
            await c.message.edit_text(f"""
<b>–ö—É—Ä—å–µ—Ä ‚Ññ{courier_data['id']} —É–¥–∞–ª–µ–Ω </b>

{await generate_courier_data_message(courier_data, courier_orders)}

–ö—É—Ä—å–µ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω (<i>–±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</i>)""")
    elif action == "to_couriers":
        await c.answer()
        partner_data = await repo.get_partner(userid=c.message.chat.id)
        couriers_list = await repo.get_couriers_list(city=partner_data['city'])
        await c.message.edit_text(text="üöö –ö—É—Ä—å–µ—Ä—ã:",
                                  reply_markup=await get_pages_keyboard(key="couriers", array=couriers_list))
