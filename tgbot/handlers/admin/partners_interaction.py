# change order courier
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils import exceptions
from aiogram.utils.exceptions import MessageNotModified

from tgbot.handlers.admin.manage_bot import manage_bot
from tgbot.keyboards.default.admin.check_partner import check_partner
from tgbot.keyboards.default.admin.return_to_menu import return_to_menu
from tgbot.keyboards.inline.admin.partner import partner_kb
from tgbot.keyboards.inline.customer.pagination import get_pages_keyboard
from tgbot.services import Repo
from tgbot.states.admin.new_partner import NewPartner


async def generate_partner_data_message(partner_data, m: Message):
    if partner_data['ordersgroupid'] is not None:
        invite = await m.bot.create_chat_invite_link(chat_id=partner_data['ordersgroupid'])
        chat_link = invite['invite_link']
        orders_group = f'<a href="{chat_link}">–°—Å—ã–ª–∫–∞</a>'
    else:
        orders_group = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    if partner_data['couriersgroupid'] is not None:
        invite = await m.bot.create_chat_invite_link(chat_id=partner_data['couriersgroupid'])
        chat_link = invite['invite_link']
        couriers_group = f'<a href="{chat_link}">–°—Å—ã–ª–∫–∞</a>'
    else:
        couriers_group = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    if partner_data['eventsgroupid'] is not None:
        invite = await m.bot.create_chat_invite_link(chat_id=partner_data['eventsgroupid'])
        chat_link = invite['invite_link']
        events_group = f'<a href="{chat_link}">–°—Å—ã–ª–∫–∞</a>'
    else:
        events_group = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

    message_to_send = f"""<b>–ü–∞—Ä—Ç–Ω–µ—Ä ‚Ññ{partner_data['id']}</b>

üßë‚Äçüíº <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
–ì–æ—Ä–æ–¥: <code>{partner_data['city'].title()}</code>

üí¨ <b>–ß–∞—Ç—ã:</b>
üõç –ó–∞–∫–∞–∑—ã: {orders_group}
üöö –ö—É—Ä—å–µ—Ä—ã: {couriers_group}
üéÉ –°–æ–±—ã—Ç–∏—è: {events_group}

–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {"‚ùå –ù–µ—Ç" if partner_data['working'] is False else "‚úÖ –î–∞"}
üÜî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://user?id={partner_data['adminid']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a> """
    return message_to_send


async def add_partner(c: CallbackQuery, repo: Repo):
    await c.answer(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
    await c.message.delete()
    admin_info = await repo.get_partner(userid=c.message.chat.id)
    if admin_info['main']:
        await c.message.answer(text="üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞-–ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
                               reply_markup=return_to_menu)
        await NewPartner.first()
    else:
        await c.message.answer(text="–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É <b>–≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>!")


async def partner_city(m: Message, repo: Repo, state: FSMContext):
    is_city_exists = await repo.is_partner_exists(city=m.text.lower())
    if is_city_exists:
        await m.answer(text="üö´ –ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –≥–æ—Ä–æ–¥–æ–º <b>—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b> –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        await state.finish()
        await manage_bot(m, repo)
        return
    await state.update_data(city=m.text.lower())
    await m.answer(text="üëë –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                   reply_markup=return_to_menu)

    await NewPartner.next()


async def partner_id(m: Message, repo: Repo, state: FSMContext):
    if m.text.isdigit():
        is_partner_exists = await repo.is_partner_exists(userid=int(m.text))
        if is_partner_exists:
            await m.answer(text="üö´ –ü–∞—Ä—Ç–Ω–µ—Ä —Å —Ç–∞–∫–∏–º ID <b>—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b> –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            await state.finish()
            await manage_bot(m, repo)
            return
        await state.update_data(admin_id=m.text)
        partner_data = await state.get_data()
        await m.answer(text=f"""<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
        
üëë ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <b>{partner_data['admin_id']}</b>
üèô –ì–æ—Ä–æ–¥: <b>{partner_data['city'].title()}</b>
    """,
                       reply_markup=check_partner)
        await NewPartner.next()
    else:
        await m.answer(text="üö´ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID</b>")


async def partner_choice(m: Message, repo: Repo, state: FSMContext):
    if m.text == "üëå –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ":
        partner_data = await state.get_data()
        await repo.add_partner(userid=partner_data['admin_id'], city=partner_data['city'].lower())
        await state.finish()
        try:
            await m.bot.send_message(chat_id=partner_data['admin_id'], text=f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ {partner_data['city'].title()}!</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.""")
            await m.answer(text=f"""–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞!
–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ - <b>{partner_data['city'].title()}</b>.
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω ID <b>{partner_data['admin_id']}</b>.""",
                           reply_markup=ReplyKeyboardRemove())
        except exceptions.ChatNotFound:
            text = f"""<b>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –µ–≥–æ –æ–± —ç—Ç–æ–º!</b>\n
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É <a href="https://t.me/dostavka30rus_bot">—Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞</a> –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ"""
            await m.answer(text=text,
                           reply_markup=ReplyKeyboardRemove())
            await manage_bot(m, repo)
        partner_data = await repo.get_partner(city=partner_data['city'])
        await m.answer(text=await generate_partner_data_message(partner_data=partner_data, m=m))

        await manage_bot(m, repo)

    elif m.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.finish()
        await m.answer(text="üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞-–ø–∞—Ä—Ç–Ω–µ—Ä–∞:", reply_markup=return_to_menu)
        await NewPartner.first()

    elif m.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await manage_bot(m, repo)


async def list_of_available_partners(m: Message, repo: Repo):
    partners_list = await repo.get_partners()
    await m.answer(text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã:",
                   reply_markup=await get_pages_keyboard(key="partners", array=partners_list))


async def show_chosen_page_partners(c: CallbackQuery, callback_data: dict, repo: Repo):
    partners_list = await repo.get_partners()
    current_page = int(callback_data.get("page"))

    try:
        await c.message.edit_reply_markup(
            await get_pages_keyboard(key="partners", array=partners_list, page=current_page))
        await c.answer()
    except MessageNotModified:
        await c.answer(text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")


async def show_partner(c: CallbackQuery, callback_data: dict, repo: Repo):
    await c.answer()
    partner_userid = callback_data['partner_id']

    answer_message = ""

    partner = await repo.get_partner(userid=partner_userid)
    answer_message += await generate_partner_data_message(partner_data=partner, m=c.message)
    await c.message.edit_text(text=answer_message, reply_markup=await partner_kb(partner_data=partner))


async def partner_action(c: CallbackQuery, callback_data: dict, repo: Repo):
    action = callback_data['action']
    if action == "activate":
        await repo.change_partner_status(partner_userid=callback_data['partner_id'], status=True)
        await c.answer(text="–ü–∞—Ä—Ç–Ω–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        partner_data = await repo.get_partner(userid=callback_data['partner_id'])
        await c.message.edit_text(text=await generate_partner_data_message(partner_data, m=c.message),
                                  reply_markup=await partner_kb(partner_data))
    elif action == "deactivate":
        await repo.change_partner_status(partner_userid=callback_data['partner_id'], status=False)
        await c.answer(text="–ü–∞—Ä—Ç–Ω–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        partner_data = await repo.get_partner(userid=callback_data['partner_id'])
        await c.message.edit_text(text=await generate_partner_data_message(partner_data, m=c.message),
                                  reply_markup=await partner_kb(partner_data))
    elif action == "delete":
        partner_data = await repo.get_partner(userid=callback_data['partner_id'])
        await repo.delete_partner(userid=callback_data['partner_id'])
        await c.answer(text="–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω")
        try:
            await c.bot.send_message(chat_id=partner_data['adminid'],
                                     text="<b>–í–∞—à –≥–æ—Ä–æ–¥ —É–¥–∞–ª–µ–Ω, —Å –≤–∞–º —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n\n"
                                          "<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>")
            await c.message.edit_text(f"""
<b>–ü–∞—Ä—Ç–Ω–µ—Ä ‚Ññ{partner_data['id']} —É–¥–∞–ª–µ–Ω </b>

üßë‚Äçüíº <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
–ì–æ—Ä–æ–¥: <code>{partner_data['city'].title()}</code>
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://user?id={partner_data['adminid']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>

–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.""")
        except exceptions.ChatNotFound:
            await c.message.edit_text(f"""
<b>–ü–∞—Ä—Ç–Ω–µ—Ä ‚Ññ{partner_data['id']} —É–¥–∞–ª–µ–Ω </b>

üßë‚Äçüíº <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
–ì–æ—Ä–æ–¥: <code>{partner_data['city'].title()}</code>
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://user?id={partner_data['adminid']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>

–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω (<i>–±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω<i>)""")

        await list_of_available_partners(m=c.message, repo=repo)
    elif action == "to_partners":
        await c.answer()
        partners_list = await repo.get_partners()
        await c.message.edit_text(text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã:",
                                  reply_markup=await get_pages_keyboard(key="partners", array=partners_list))


async def activate_partner(m: Message, repo: Repo):
    partner_data = await repo.get_partner(userid=m.chat.id)
    if partner_data['working'] is True:
        await m.answer(text="–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –±–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return
    if partner_data['ordersgroupid'] is None or partner_data['couriersgroupid'] is None \
            or partner_data['eventsgroupid'] is None:
        await m.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥—Ä—É–ø–ø—ã.\n"
                       "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setting_groups –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    await repo.change_partner_status(partner_userid=m.chat.id, status=True)
    await m.answer(text="<b>–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        "–í–∞—à –≥–æ—Ä–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∞ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
    await manage_bot(m, repo)


async def deactivate_partner(m: Message, repo: Repo):
    partner_data = await repo.get_partner(userid=m.chat.id)
    if partner_data['working'] is False:
        await m.answer(text="–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –±–æ—Ç —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        return
    await repo.change_partner_status(partner_userid=m.chat.id, status=False)
    await m.answer(text="<b>–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        "–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∞ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å "
                        "–∑–∞–∫–∞–∑.")
    await manage_bot(m, repo)
