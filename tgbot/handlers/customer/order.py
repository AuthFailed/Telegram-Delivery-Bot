from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from tgbot.config import load_config
from tgbot.handlers.manager.order_interaction import generate_order_data_message
from tgbot.keyboards.default.user.check_order import check_order
from tgbot.keyboards.default.user.choose_time import choose_time
from tgbot.keyboards.default.user.main_menu import main_menu
from tgbot.keyboards.default.user.return_to_menu import return_to_menu
from tgbot.keyboards.inline.customer.aiogramcalendar import create_calendar, process_calendar_selection
from tgbot.keyboards.inline.manager.order import order_keyboard
from tgbot.services.repository import Repo
from tgbot.states.user.order import Order


async def order_starts(m: Message, repo: Repo):
    is_user_exists = await repo.is_user_exists(user_id=m.chat.id)

    if is_user_exists:
        customer_data = await repo.get_user(user_id=m.chat.id)
        if customer_data['usertype'] == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
            answer_message = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
        else:
            answer_message = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n–î–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
        await m.reply(text=answer_message,
                      reply_markup=return_to_menu)
        await Order.first()


async def order_all_info(m: Message, repo: Repo, state: FSMContext):
    customer_data = await repo.get_user(user_id=m.chat.id)
    user_type = customer_data['usertype']
    await state.update_data(user_type=user_type)

    spliced_info = m.text.splitlines()
    if user_type == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
        if len(spliced_info) == 3:
            order_name = spliced_info[0]
            order_number = spliced_info[1]
            order_address = spliced_info[2]
            await state.update_data(
                order_name=order_name,
                order_number=order_number,
                order_address=order_address,
            )
            await m.answer(
                text=f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=create_calendar(),
            )
            await Order.order_date.set()
        else:
            await m.answer(text="‚úñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    else:
        if len(spliced_info) == 4:
            order_name = spliced_info[0]
            order_number = spliced_info[1]
            order_address = spliced_info[2]
            order_datetime = spliced_info[3]
            await state.update_data(
                order_name=order_name,
                order_number=order_number,
                order_address=order_address,
                order_datetime=order_datetime,
            )
            await m.answer(
                text=f"""–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å –∫—É—Ä—å–µ—Ä—É

<i>–ù–∞–ø—Ä–∏–º–µ—Ä:
- –í –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É 
- –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä</i>""",
                reply_markup=return_to_menu,
            )
            await Order.other_details.set()
        else:
            await m.answer(text="‚úñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


async def order_date(call: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await process_calendar_selection(call, callback_data)
    if selected:
        await call.message.edit_text(text=f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date.strftime('%d.%m.%Y')}")
        await state.update_data(order_date=date.strftime("%d.%m.%Y"))

        await call.message.answer(text="‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
                                  reply_markup=choose_time)

        await Order.order_time.set()


async def order_time(m: Message, state: FSMContext):
    await state.update_data(order_time=m.text)

    await m.answer(
        text=f"""–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –∑–∞–±—Ä–∞—Ç—å –∫—É—Ä—å–µ—Ä—É

<i>–ù–∞–ø—Ä–∏–º–µ—Ä:
- –í –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É 
- –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä</i>""",
        reply_markup=return_to_menu)

    await Order.other_details.set()


async def order_other_details(m: Message, repo: Repo, state: FSMContext):
    other_details = m.text
    async with state.proxy() as data:
        data['other_details'] = other_details
        order_data = data
    customer_data = await repo.get_user(user_id=m.chat.id)
    if 'order_datetime' not in data:
        order_datetime = f"{data['order_time']} {data['order_date']}"
    else:
        order_datetime = data['order_datetime']

    await m.reply(text=f"""üö© –í–∞—à –∑–∞–∫–∞–∑
‚è≥ –°—Ç–∞—Ç—É—Å: <i>–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è</i>    
üöö –ö—É—Ä—å–µ—Ä: <i>–ù–µ –≤—ã–±—Ä–∞–Ω</i>

üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:
–õ–∏—Ü–æ: <code>{customer_data['name']}</code>
–ê–¥—Ä–µ—Å: <code>{customer_data['address']}</code>
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {customer_data['number']}

üì• –ü–æ–ª—É—á–∞—Ç–µ–ª—å:
–§–ò–û: <code>{order_data['order_name']}</code>
–ù–æ–º–µ—Ä: <code>{order_data['order_number']}</code>
–ê–¥—Ä–µ—Å: {order_data['order_address']}

üì¶ –û –∑–∞–∫–∞–∑–µ:
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: <code>{order_datetime}</code>
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: <code>{order_data['other_details']}</code>
""",
                  reply_markup=check_order)
    await Order.next()


async def order_user_choice(m: Message, repo: Repo, state=FSMContext):
    if m.text == "üëå –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ":
        order_data = await state.get_data()
        customer_data = await repo.get_user(user_id=m.chat.id)
        if 'order_datetime' not in order_data:
            order_datetime = f"{order_data['order_time']} {order_data['order_date']}"
        else:
            order_datetime = order_data['order_datetime']

        order_id = await repo.add_order(
            customer_id=m.chat.id,
            customer_type=customer_data["usertype"],
            customer_name=customer_data["name"],
            customer_address=customer_data["address"],
            customer_number=customer_data["number"],
            order_name=order_data["order_name"],
            order_address=order_data["order_address"],
            order_number=order_data["order_number"],
            order_time=order_datetime,
            other_details=order_data["other_details"],
        )

        order_data = await repo.get_order(order_id=order_id)
        config = load_config("bot.ini")
        await m.bot.send_message(chat_id=config.tg_bot.orders_group,
                                 text=await generate_order_data_message(order_data=order_data, is_new=True,
                                                                        is_company=True if customer_data[
                                                                                               "usertype"] == "–ö–æ–º–ø–∞–Ω–∏—è" else False,
                                                                        repo=repo),
                                 reply_markup=await order_keyboard(order_id=order_id))

        await m.answer(
            text=f"üö© –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                 f"‚è≥ –°—Ç–∞—Ç—É—Å: <i>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</i>",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.finish()
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                       reply_markup=await main_menu(reg=True))
    elif m.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.reset_data()
        customer = await repo.get_user(user_id=m.chat.id)
        customer_type = customer['usertype']

        if customer_type == "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
            answer_message = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
        else:
            answer_message = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n–î–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
        await m.answer(
            text=answer_message,
            reply_markup=return_to_menu,
        )
        await Order.first()
