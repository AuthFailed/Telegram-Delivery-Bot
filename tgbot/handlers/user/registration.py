from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from tgbot.keyboards.default.user.main_menu import main_menu
from tgbot.keyboards.default.user.return_to_menu import return_to_menu
from tgbot.keyboards.default.user.who_are_you import who_are_you
from tgbot.services.repository import Repo
from tgbot.states.user.registration import Registration


async def reg_starts(m: Message):
    await m.answer(text="–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç —á–∞—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞?",
                   reply_markup=who_are_you)
    await Registration.first()


async def reg_user_type(m: Message, repo: Repo, state: FSMContext):
    if m.text == "üë• –ö–æ–º–ø–∞–Ω–∏—è":
        await state.update_data(user_type="–ö–æ–º–ø–∞–Ω–∏—è")
        await m.reply(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=return_to_menu)
        await Registration.next()
    elif m.text == "üë®‚Äçüíª –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
        await state.update_data(user_type='–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ')
        await m.reply(text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=return_to_menu)
        await Registration.next()
    else:
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_menu(reg=is_user_exists))
        await state.finish()


async def reg_name(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['name'] = m.text
            user_type = data['user_type']

        if user_type == "–ö–æ–º–ø–∞–Ω–∏—è":
            await m.reply(text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏:",
                          reply_markup=return_to_menu)
        else:
            await m.reply(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:\n"
                               "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É—à–∫–∏–Ω–∞ 20",
                          reply_markup=return_to_menu)
        await Registration.next()


async def reg_address(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['address'] = m.text
            user_type = data['user_type']

        if user_type == "–ö–æ–º–ø–∞–Ω–∏—è":
            await m.reply(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏:",
                          reply_markup=return_to_menu)
        else:
            await m.reply(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                          reply_markup=return_to_menu)
        await Registration.next()


async def reg_number(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['number'] = m.text

        await repo.add_user(user_id=m.chat.id,
                            user_type=data['user_type'],
                            name=data['name'],
                            address=data['address'],
                            number=data['number'])
        await state.finish()
        await m.answer(text="üëã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É!")
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await main_menu(reg=True))
