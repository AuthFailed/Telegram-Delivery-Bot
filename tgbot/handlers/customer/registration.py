from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.exceptions import MessageNotModified

from tgbot.handlers.customer.start import start
from tgbot.keyboards.default.customer.main_menu import main_menu as user_main_menu
from tgbot.keyboards.default.customer.return_to_menu import return_to_menu
from tgbot.keyboards.default.customer.send_number import ask_phone_number
from tgbot.keyboards.default.customer.who_are_you import who_are_you
from tgbot.keyboards.inline.customer.pagination import get_pages_keyboard
from tgbot.services.repository import Repo
from tgbot.states.customer.registration import RegistrationUser, RegistrationCourier


async def reg_starts(m: Message, state: FSMContext, referral=None,):  # @TODO —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
    await m.answer(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ <b>–∫–æ–º–ø–∞–Ω–∏—è</b>, <b>—á–∞—Å—Ç–Ω–æ –µ –ª–∏—Ü–æ</b> –∏–ª–∏ <b>—Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º</b>?",
                   reply_markup=who_are_you)
    await RegistrationUser.first()


# user
async def reg_type(m: Message, repo: Repo, state: FSMContext):
    if m.text == "üë• –ö–æ–º–ø–∞–Ω–∏—è":
        await state.update_data(type="–ö–æ–º–ø–∞–Ω–∏—è")
        await m.reply(text="–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>:", reply_markup=return_to_menu)
        await RegistrationUser.next()
    elif m.text == "üë®‚Äçüíª –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
        await state.update_data(type='–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ')
        await m.reply(text="üßë‚Äçüíº –í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û</b>:", reply_markup=return_to_menu)
        await RegistrationUser.next()
    elif m.text == "üöö –°—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º":
        await m.reply(text="üßë‚Äçüíº –í–≤–µ–¥–∏—Ç–µ <b>–§–ò–û</b>:", reply_markup=return_to_menu)
        await RegistrationCourier.first()
    else:
        is_user_exists = await repo.is_customer_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()


async def reg_name(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_customer_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['name'] = m.text

        cities_list = await repo.get_available_cities()
        if len(cities_list) > 0:
            await m.reply(text="üì¨ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞",
                          reply_markup=await get_pages_keyboard(array=cities_list, width=2, items_per_page=10,
                                                                key="cities"))
            await RegistrationUser.next()
        else:
            await m.answer(text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞.")
            await start(m, repo, state)


async def show_chosen_page(c: CallbackQuery, callback_data: dict, repo: Repo):
    cities_list = await repo.get_available_cities()
    current_page = int(callback_data.get("page"))

    try:
        await c.message.edit_reply_markup(
            await get_pages_keyboard(cities_list, width=2, items_per_page=10, page=current_page, key="cities"))
        await c.answer()
    except MessageNotModified:
        await c.answer(text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")


async def set_city(c: CallbackQuery, callback_data: dict, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = callback_data['city_name'].lower()
        user_type = data['type']
    await c.answer(text=f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ {callback_data['city_name']}")
    if user_type == "–ö–æ–º–ø–∞–Ω–∏—è":
        await c.message.edit_text(text="üì¨ –í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏</b>:")
    else:
        await c.message.edit_text(text="üì¨ –í–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à –∞–¥—Ä–µ—Å</b>:\n"
                                       "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É—à–∫–∏–Ω–∞ 20</i>")
    await RegistrationUser.next()


async def reg_address(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_customer_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['address'] = m.text
            user_type = data['type']

        if user_type == "–ö–æ–º–ø–∞–Ω–∏—è":
            await m.reply(text="üì±Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏</b>:",
                          reply_markup=return_to_menu)
        else:
            await m.reply(text="üì±Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>:",
                          reply_markup=ask_phone_number)
        await RegistrationUser.next()


async def reg_number(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_customer_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()
    else:
        if m.contact is not None:
            phone_number = m.contact.phone_number
        else:
            phone_number = m.text
        async with state.proxy() as data:
            data['number'] = phone_number

        await repo.add_customer(userid=m.chat.id, user_type=data['type'], name=data['name'],
                                city=data['city'], address=data['address'], number=data['number'])
        await state.finish()
        # await new_customer(m=m, customer_data=data, customer_id=customer_id) TODO –ª–æ–≥–≥–∏–Ω–≥
        await m.answer(text="üëã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑!")
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=True))
