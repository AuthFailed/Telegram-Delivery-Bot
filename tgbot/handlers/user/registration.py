from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from tgbot.keyboards.default.courier.main_menu import main_menu as courier_main_menu
from tgbot.keyboards.default.user.main_menu import main_menu as user_main_menu
from tgbot.keyboards.default.user.return_to_menu import return_to_menu
from tgbot.keyboards.default.user.who_are_you import who_are_you
from tgbot.services.repository import Repo
from tgbot.states.user.registration import RegistrationUser, RegistrationCourier


async def reg_starts(m: Message):
    await m.answer(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ *–∫–æ–º–ø–∞–Ω–∏—è*, *—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ* –∏–ª–∏ *—Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º*?",
                   reply_markup=who_are_you,
                   parse_mode="MarkdownV2")
    await RegistrationUser.first()


# user
async def reg_user_type(m: Message, repo: Repo, state: FSMContext):
    if m.text == "üë• –ö–æ–º–ø–∞–Ω–∏—è":
        await state.update_data(user_type="–ö–æ–º–ø–∞–Ω–∏—è")
        await m.reply(text="–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏*:", reply_markup=return_to_menu,
                      parse_mode="MarkdownV2")
        await RegistrationUser.next()
    elif m.text == "üë®‚Äçüíª –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ":
        await state.update_data(user_type='–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ')
        await m.reply(text="üë§ –í–≤–µ–¥–∏—Ç–µ *–§–ò–û*:", reply_markup=return_to_menu,
                      parse_mode="MarkdownV2")
        await RegistrationUser.next()
    elif m.text == "üöö –°—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º":
        await state.finish()
        await m.reply(text="üë§ –í–≤–µ–¥–∏—Ç–µ *–§–ò–û*:", reply_markup=return_to_menu,
                      parse_mode="MarkdownV2")
        await RegistrationCourier.first()
    else:
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()


async def reg_user_name(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['name'] = m.text
            user_type = data['user_type']

        if user_type == "–ö–æ–º–ø–∞–Ω–∏—è":
            await m.reply(text="üì¨ –í–≤–µ–¥–∏—Ç–µ *–∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏*:",
                          reply_markup=return_to_menu,
                          parse_mode="MarkdownV2")
        else:
            await m.reply(text="üì¨ –í–≤–µ–¥–∏—Ç–µ *–≤–∞—à –∞–¥—Ä–µ—Å*:\n"
                               "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É—à–∫–∏–Ω–∞ 20",
                          reply_markup=return_to_menu,
                          parse_mode="MarkdownV2")
        await RegistrationUser.next()


async def reg_user_address(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['address'] = m.text
            user_type = data['user_type']

        if user_type == "–ö–æ–º–ø–∞–Ω–∏—è":
            await m.reply(text="‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ *—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏*:",
                          reply_markup=return_to_menu,
                          parse_mode="MarkdownV2")
        else:
            await m.reply(text="‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ *–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:",
                          reply_markup=return_to_menu,
                          parse_mode="MarkdownV2")
        await RegistrationUser.next()


async def reg_user_number(m: Message, repo: Repo, state: FSMContext):
    if m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        is_user_exists = await repo.is_user_exists(user_id=m.chat.id)
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=is_user_exists))
        await state.finish()
    else:
        async with state.proxy() as data:
            data['number'] = m.text

        await repo.add_user(user_id=m.chat.id,
                            user_type=data['user_type'],
                            name=data['name'],
                            address=data['address'],
                            number=data['number'])
        await state.finish()
        await m.answer(text="üëã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É!")
        await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await user_main_menu(reg=True))


# courier
async def reg_courier_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text)

    await m.reply(text="‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* \(–Ω–∞—á–∏–Ω–∞—è —Å \+7\):", reply_markup=return_to_menu,
                  parse_mode="MarkdownV2")
    await RegistrationCourier.next()


async def reg_courier_number(m: Message, state: FSMContext):
    await state.update_data(number=m.text)

    await m.reply(text="üóé –û—Ç–ø—Ä–∞–≤—å—Ç–µ *–≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Å–ø–æ—Ä—Ç–∞*:",
                  reply_markup=return_to_menu,
                  parse_mode="MarkdownV2")
    await RegistrationCourier.next()


async def reg_courier_passport_main(m: Message, state: FSMContext):
    await state.update_data(passport_main=m.photo[0].file_id)

    await m.reply(text="üóé –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π*:",
                  reply_markup=return_to_menu,
                  parse_mode="MarkdownV2")
    await RegistrationCourier.next()


async def reg_courier_passport_registration(m: Message, state: FSMContext):
    await state.update_data(passport_registration=m.photo[0].file_id)

    await m.reply(text="üí≥ –û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è*:",
                  reply_markup=return_to_menu,
                  parse_mode="MarkdownV2")
    await RegistrationCourier.next()


async def reg_courier_driving_license_front(m: Message, state: FSMContext):
    await state.update_data(driving_license_front=m.photo[0].file_id)

    await m.reply("üí≥ –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è*:", reply_markup=return_to_menu,
                  parse_mode="MarkdownV2")
    await RegistrationCourier.next()


async def reg_courier_driving_license_back(m: Message, repo: Repo, state: FSMContext):
    async with state.proxy() as data:
        data['driving_license_back'] = m.photo[0].file_id
        courier_data = data

    await repo.add_courier(user_id=m.chat.id, name=courier_data['name'], number=courier_data['number'],
                           passport_main_id=courier_data['passport_main'],
                           passport_registration_id=courier_data['passport_registration'],
                           driver_license_back_id=courier_data['driving_license_front'],
                           driver_license_front_id=courier_data['driving_license_back'])
    await state.finish()
    await m.answer(text="üëã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
    await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=courier_main_menu)
