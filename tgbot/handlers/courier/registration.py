from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tgbot.handlers.courier.start import start
from tgbot.keyboards.default.courier.main_menu import main_menu
from tgbot.keyboards.default.customer.return_to_menu import return_to_menu
from tgbot.keyboards.inline.customer.cities import cities
from tgbot.keyboards.inline.manager.accept_courier import courier_request_kb
from tgbot.services.event_handlers import new_courier
from tgbot.services.repository import Repo
from tgbot.states.customer.registration import RegistrationCourier


async def reg_name(m: Message, repo: Repo, state: FSMContext):
    await state.update_data(name=m.text)

    cities_list = await repo.get_available_cities()
    if len(cities_list) > 0:
        await m.reply(text="üì¨ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞",
                      reply_markup=await cities(cities_list=cities_list))
        await RegistrationCourier.next()
    else:
        await m.answer(text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞.")
        await start(m, state)


async def reg_city(c: CallbackQuery, callback_data: dict, state: FSMContext):
    await state.update_data(city=callback_data['city_name'].lower())
    await c.answer(text=f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ {callback_data['city_name']}")

    await c.message.reply(text="üì±Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–Ω–∞—á–∏–Ω–∞—è —Å +7):", reply_markup=return_to_menu)
    await RegistrationCourier.next()


async def reg_number(m: Message, state: FSMContext):
    await state.update_data(number=m.text)

    await m.reply(text="üíº –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Å–ø–æ—Ä—Ç–∞</b>:",
                  reply_markup=return_to_menu)
    await RegistrationCourier.next()


async def reg_passport_main(m: Message, state: FSMContext):
    await state.update_data(passport_main=m.photo[0].file_id)

    await m.reply(text="üíº –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π</b>:",
                  reply_markup=return_to_menu)
    await RegistrationCourier.next()


async def reg_passport_registration(m: Message, state: FSMContext):
    await state.update_data(passport_registration=m.photo[0].file_id)

    await m.reply(text="üí≥ –û—Ç–ª–∏—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è</b>:",
                  reply_markup=return_to_menu)
    await RegistrationCourier.next()


async def reg_driving_license_front(m: Message, state: FSMContext):
    await state.update_data(driving_license_front=m.photo[0].file_id)

    await m.reply("üí≥ –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è</b>:",
                  reply_markup=return_to_menu)
    await RegistrationCourier.next()


async def reg_driving_license_back(m: Message, repo: Repo, state: FSMContext):
    async with state.proxy() as data:
        data['driving_license_back'] = m.photo[0].file_id
        courier_data = data

    courier_db_data = await repo.add_courier(user_id=m.chat.id, name=courier_data['name'],
                                             city=courier_data['city'],
                                             number=courier_data['number'],
                                             passport_main_id=courier_data['passport_main'],
                                             passport_registration_id=courier_data['passport_registration'],
                                             driver_license_back_id=courier_data['driving_license_front'],
                                             driver_license_front_id=courier_data['driving_license_back'])
    await state.finish()
    await m.answer(text="üëã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
    await m.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    media = types.MediaGroup()
    media.attach_photo(courier_db_data[0]['passportmain'])
    media.attach_photo(courier_db_data[0]['passportregistration'])
    media.attach_photo(courier_db_data[0]['driverlicensefront'])
    media.attach_photo(courier_db_data[0]['driverlicenseback'])

    courier_message = f"""<b>üöö –ö—É—Ä—å–µ—Ä ‚Ññ{courier_db_data[0]['id']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b>

üë® –î–∞–Ω–Ω—ã–µ:
–§–ò–û: <code>{courier_data['name']}</code>
–ì–æ—Ä–æ–¥: <code>{courier_data['city'].title()}</code>
–ù–æ–º–µ—Ä: {courier_data['number']}

‚è≥ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:
<i>–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</i>"""

    city_data = await repo.get_partner(city=courier_data['city'])
    courier_data_message = await m.bot.send_message(chat_id=city_data['couriersgroupid'],
                                                    text=courier_message,
                                                    reply_markup=await courier_request_kb(courier_id=m.chat.id))
    if city_data['couriersgroupid'] is not None:
        await new_courier(m=m, courier_data=courier_db_data[0])
    await courier_data_message.answer_media_group(media=media,
                                                  reply=True)
