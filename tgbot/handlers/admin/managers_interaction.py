# change order courier
from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import MessageNotModified

from tgbot.handlers.admin.start import start
from tgbot.keyboards.default.admin.check_manager import check_manager
from tgbot.keyboards.inline.admin.manager import manager_kb
from tgbot.keyboards.inline.customer.pagination import get_pages_keyboard

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from tgbot.handlers.admin.manage_bot import manage_bot
from tgbot.keyboards.default.admin.return_to_menu import return_to_menu
from tgbot.services import Repo
from tgbot.states.admin.new_manager import NewManager


async def generate_manager_data_message(manager_data):
    message_to_send = f"""<b>–ú–µ–Ω–µ–¥–∂–µ—Ä ‚Ññ{manager_data['id']}</b>

üë® <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:
–§–∏–æ: <code>{manager_data['name']}</code>
–ì–æ—Ä–æ–¥: <code>{manager_data['city'].title()}</code>
–ù–æ–º–µ—Ä: {manager_data['number']}

–ü—Ä–æ—Ñ–∏–ª—å: <a href="tg://user?id={manager_data['userid']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a> """

    return message_to_send


async def add_manager(c: CallbackQuery):
    await c.answer(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    await c.message.delete()
    await c.message.answer(text="üÜî –í–≤–µ–¥–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (/id):",
                           reply_markup=return_to_menu)
    await NewManager.first()


async def manager_id(m: Message, repo: Repo, state: FSMContext):
    if m.text.isdigit():
        is_manager_exists = await repo.is_manager_exists(manager_id=m.text)
        if is_manager_exists:
            await m.answer(text="üö´ –î–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
                                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            await state.finish()
            await manage_bot(m, repo)
            return
        await state.update_data(manager_id=m.text)
        await m.answer(text="üë®‚Äçüíº –í–≤–µ–¥–∏—Ç–µ –§–ò–û –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
                       reply_markup=return_to_menu)

        await NewManager.next()
    else:
        await m.answer(text="üö´ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID</b>")


async def manager_fio(m: Message, state: FSMContext):
    await state.update_data(fio=m.text)
    await m.answer(text="üì±Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–Ω–∞—á–∏–Ω–∞—è —Å +7):")

    await NewManager.next()


async def manager_number(m: Message, state: FSMContext):
    await state.update_data(number=m.text)
    manager_data = await state.get_data()

    await m.answer(text=f"""–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

üë®‚Äçüíº –§–∏–æ: <b>{manager_data['fio']}</b>
üì±Ô∏è –ù–æ–º–µ—Ä: <b>{manager_data['number']}</b>
üÜî –ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: <a href="tg://user?id={manager_data['manager_id']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a> 
""",
                   reply_markup=check_manager)
    await NewManager.next()


async def manager_choice(m: Message, repo: Repo, state: FSMContext):
    if m.text == "üëå –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ":
        partner_data = await repo.get_partner(admin_id=m.from_user.id)
        city = partner_data['city']
        manager_data = await state.get_data()
        await repo.add_manager(manager_id=manager_data['manager_id'],
                               name=manager_data['fio'],
                               city=city,
                               number=manager_data['number'])
        await state.finish()
        await m.bot.send_message(chat_id=manager_data['manager_id'], text=f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã <b>–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ {partner_data['city'].title()}!</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.""")
        await m.answer(text=f"""–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!

üë®‚Äçüíº –§–∏–æ: <b>{manager_data['fio']}</b>
üì±Ô∏è –ù–æ–º–µ—Ä: <b>{manager_data['number']}</b>
üÜî –ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: <a href="tg://user?id={manager_data['manager_id']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a> 

–ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏.""",
                       reply_markup=ReplyKeyboardRemove())
        await manage_bot(m, repo)
    elif m.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        await state.finish()
        await m.answer(text="üÜî –í–≤–µ–¥–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (/id):", reply_markup=return_to_menu)
        await NewManager.first()

    elif m.text == "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await start(m, repo, state)


async def list_of_available_managers(m: Message, repo: Repo):
    partner_data = await repo.get_partner(admin_id=m.from_user.id)
    managers_list = await repo.get_managers_list(city=partner_data['city'])
    await m.answer(text="üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã:",
                   reply_markup=await get_pages_keyboard(key="managers", array=managers_list))


async def show_chosen_page_managers(c: CallbackQuery, callback_data: dict, repo: Repo):
    partner_data = await repo.get_partner(admin_id=c.message.chat.id)
    managers_list = await repo.get_managers_list(city=partner_data['city'])
    current_page = int(callback_data.get("page"))

    try:
        await c.message.edit_reply_markup(
            await get_pages_keyboard(key="managers", array=managers_list, page=current_page))
        await c.answer()
    except MessageNotModified:
        await c.answer(text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞")


async def show_manager(c: CallbackQuery, callback_data: dict, repo: Repo):
    await c.answer()
    manager_id = callback_data['manager_id']

    manager = await repo.get_manager(manager_id=manager_id)
    print(manager)
    answer_message = await generate_manager_data_message(manager_data=manager)
    await c.message.edit_text(text=answer_message, reply_markup=await manager_kb(manager_data=manager))


async def manager_action(c: CallbackQuery, callback_data: dict, repo: Repo):
    action = callback_data['action']
    print(callback_data)
    if action == "delete":
        manager_data = await repo.get_manager(manager_id=callback_data['manager_id'])
        print(manager_data)
        await repo.delete_manager(manager_id=callback_data['manager_id'])
        await c.answer(text="–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω")
        await c.bot.send_message(chat_id=manager_data['userid'],
                                 text="<b>–° –≤–∞—Å —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.</b>\n\n"
                                      "<i>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.</i>")
        await c.message.edit_text(f"""
<b>–ú–µ–Ω–µ–¥–∂–µ—Ä ‚Ññ{manager_data['id']} —É–¥–∞–ª–µ–Ω </b>

üë®‚Äçüíº –§–∏–æ: <b>{manager_data['name']}</b>
üì±Ô∏è –ù–æ–º–µ—Ä: <b>{manager_data['number']}</b>
üÜî –ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: <a href="tg://user?id={manager_data['userid']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>

""")

        await list_of_available_managers(m=c.message, repo=repo)
    elif action == "to_managers":
        await c.answer()
        partner_data = await repo.get_partner(admin_id=c.message.chat.id)
        managers_list = await repo.get_managers_list(city=partner_data['city'])
        await c.message.edit_text(text="üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã:",
                                  reply_markup=await get_pages_keyboard(key="managers", array=managers_list))
